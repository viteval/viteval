{"version":3,"sources":["server.ts"],"sourcesContent":["import type { Server } from 'node:http';\nimport path from 'node:path';\nimport express from 'express';\nimport { findUp } from 'find-up';\nimport getPort from 'get-port';\nimport { listener } from './.output/server/index.mjs';\n\nexport interface CreateVitevalServerOptions {\n  /**\n   * A custom root path to serve the UI from, otherwise will look for the `viteval.config.ts` file or `.viteval` directory\n   * @default process.cwd()\n   */\n  root?: string;\n  /**\n   * A custom port to listen on\n   * @default 3000\n   */\n  port?: number;\n  /**\n   * Turn on debug mode (used for development)\n   * @default false\n   */\n  debug?: boolean;\n}\n\n/**\n * Creates a Viteval server\n *\n * ```ts\n * const server = createVitevalServer({ port: 3000 });\n * await server.start();\n * ```\n *\n * @param options - The options for the Viteval server\n * @returns The Viteval server\n */\nexport function createVitevalServer(options?: CreateVitevalServerOptions) {\n  const app = express();\n  app.use(express.static(path.join(import.meta.dirname, '.output', 'public')));\n  app.use(listener);\n  let server: Server;\n  return {\n    /**\n     * Starts the Viteval server\n     * @returns The port the server is listening on\n     */\n    async start(): Promise<number> {\n      // set the root path in the environment variables\n      const root = await findRoot(options?.root);\n      process.env.VITEVAL_ROOT_PATH = root;\n      process.env.VITEVAL_DEBUG_MODE = options?.debug ? 'true' : 'false';\n\n      const port = await getPort({ port: options?.port ?? 3000 });\n      return new Promise((resolve) => {\n        server = app.listen(port, () => {\n          resolve(port);\n        });\n      });\n    },\n    /**\n     * Restarts the Viteval server\n     * @returns The port the server is listening on\n     */\n    async restart(): Promise<number> {\n      await this.shutdown();\n      return await this.start();\n    },\n    /**\n     * Shuts down the Viteval server\n     */\n    async shutdown(): Promise<void> {\n      return new Promise((resolve) => {\n        server.close(() => {\n          // Reset the environment variables\n          process.env.VITEVAL_ROOT_PATH = undefined;\n          process.env.VITEVAL_DEBUG_MODE = undefined;\n          resolve();\n        });\n      });\n    },\n  };\n}\n\n/*\n|------------------\n| Internals\n|------------------\n*/\n\nasync function findRoot(root: string = process.cwd()) {\n  const configFile = await findUp(\n    [\n      ...['ts', 'js', 'mts', 'mjs'].map((ext) => `viteval.config.${ext}`),\n      '.viteval',\n    ],\n    {\n      cwd: root,\n    }\n  );\n  return configFile ? path.dirname(configFile) : root;\n}\n"],"mappings":"AACA,OAAOA,MAAU,YACjB,OAAOC,MAAa,UACpB,OAAS,UAAAC,MAAc,UACvB,OAAOC,MAAa,WACpB,OAAS,YAAAC,MAAgB,6BA+BlB,SAASC,EAAoBC,EAAsC,CACxE,MAAMC,EAAMN,EAAQ,EACpBM,EAAI,IAAIN,EAAQ,OAAOD,EAAK,KAAK,YAAY,QAAS,UAAW,QAAQ,CAAC,CAAC,EAC3EO,EAAI,IAAIH,CAAQ,EAChB,IAAII,EACJ,MAAO,CAKL,MAAM,OAAyB,CAE7B,MAAMC,EAAO,MAAMC,EAASJ,GAAS,IAAI,EACzC,QAAQ,IAAI,kBAAoBG,EAChC,QAAQ,IAAI,mBAAqBH,GAAS,MAAQ,OAAS,QAE3D,MAAMK,EAAO,MAAMR,EAAQ,CAAE,KAAMG,GAAS,MAAQ,GAAK,CAAC,EAC1D,OAAO,IAAI,QAASM,GAAY,CAC9BJ,EAASD,EAAI,OAAOI,EAAM,IAAM,CAC9BC,EAAQD,CAAI,CACd,CAAC,CACH,CAAC,CACH,EAKA,MAAM,SAA2B,CAC/B,aAAM,KAAK,SAAS,EACb,MAAM,KAAK,MAAM,CAC1B,EAIA,MAAM,UAA0B,CAC9B,OAAO,IAAI,QAASC,GAAY,CAC9BJ,EAAO,MAAM,IAAM,CAEjB,QAAQ,IAAI,kBAAoB,OAChC,QAAQ,IAAI,mBAAqB,OACjCI,EAAQ,CACV,CAAC,CACH,CAAC,CACH,CACF,CACF,CAQA,eAAeF,EAASD,EAAe,QAAQ,IAAI,EAAG,CACpD,MAAMI,EAAa,MAAMX,EACvB,CACE,GAAG,CAAC,KAAM,KAAM,MAAO,KAAK,EAAE,IAAKY,GAAQ,kBAAkBA,CAAG,EAAE,EAClE,UACF,EACA,CACE,IAAKL,CACP,CACF,EACA,OAAOI,EAAab,EAAK,QAAQa,CAAU,EAAIJ,CACjD","names":["path","express","findUp","getPort","listener","createVitevalServer","options","app","server","root","findRoot","port","resolve","configFile","ext"]}