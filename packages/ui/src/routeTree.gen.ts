/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DatasetsRouteImport } from './routes/datasets'
import { Route as IdRouteImport } from './routes/$id'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DatasetsIdRouteImport } from './routes/datasets.$id'

const DatasetsRoute = DatasetsRouteImport.update({
  id: '/datasets',
  path: '/datasets',
  getParentRoute: () => rootRouteImport,
} as any)
const IdRoute = IdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DatasetsIdRoute = DatasetsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => DatasetsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$id': typeof IdRoute
  '/datasets': typeof DatasetsRouteWithChildren
  '/datasets/$id': typeof DatasetsIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$id': typeof IdRoute
  '/datasets': typeof DatasetsRouteWithChildren
  '/datasets/$id': typeof DatasetsIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$id': typeof IdRoute
  '/datasets': typeof DatasetsRouteWithChildren
  '/datasets/$id': typeof DatasetsIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$id' | '/datasets' | '/datasets/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$id' | '/datasets' | '/datasets/$id'
  id: '__root__' | '/' | '/$id' | '/datasets' | '/datasets/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  IdRoute: typeof IdRoute
  DatasetsRoute: typeof DatasetsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/datasets': {
      id: '/datasets'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof DatasetsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$id': {
      id: '/$id'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof IdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/datasets/$id': {
      id: '/datasets/$id'
      path: '/$id'
      fullPath: '/datasets/$id'
      preLoaderRoute: typeof DatasetsIdRouteImport
      parentRoute: typeof DatasetsRoute
    }
  }
}

interface DatasetsRouteChildren {
  DatasetsIdRoute: typeof DatasetsIdRoute
}

const DatasetsRouteChildren: DatasetsRouteChildren = {
  DatasetsIdRoute: DatasetsIdRoute,
}

const DatasetsRouteWithChildren = DatasetsRoute._addFileChildren(
  DatasetsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  IdRoute: IdRoute,
  DatasetsRoute: DatasetsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
