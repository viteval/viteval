/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResultsRouteImport } from './routes/results'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResultsResultIdRouteImport } from './routes/results.$resultId'

const ResultsRoute = ResultsRouteImport.update({
  id: '/results',
  path: '/results',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResultsResultIdRoute = ResultsResultIdRouteImport.update({
  id: '/$resultId',
  path: '/$resultId',
  getParentRoute: () => ResultsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/results': typeof ResultsRouteWithChildren
  '/results/$resultId': typeof ResultsResultIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/results': typeof ResultsRouteWithChildren
  '/results/$resultId': typeof ResultsResultIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/results': typeof ResultsRouteWithChildren
  '/results/$resultId': typeof ResultsResultIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/results' | '/results/$resultId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/results' | '/results/$resultId'
  id: '__root__' | '/' | '/results' | '/results/$resultId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResultsRoute: typeof ResultsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/results': {
      id: '/results'
      path: '/results'
      fullPath: '/results'
      preLoaderRoute: typeof ResultsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/results/$resultId': {
      id: '/results/$resultId'
      path: '/$resultId'
      fullPath: '/results/$resultId'
      preLoaderRoute: typeof ResultsResultIdRouteImport
      parentRoute: typeof ResultsRoute
    }
  }
}

interface ResultsRouteChildren {
  ResultsResultIdRoute: typeof ResultsResultIdRoute
}

const ResultsRouteChildren: ResultsRouteChildren = {
  ResultsResultIdRoute: ResultsResultIdRoute,
}

const ResultsRouteWithChildren =
  ResultsRoute._addFileChildren(ResultsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResultsRoute: ResultsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
